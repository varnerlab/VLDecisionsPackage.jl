(¤ђрхб::MySimpleGamePolicy)(aрхб) = get(¤ђрхб.p, aрхб, 0.0)

function (¤ђрхб::MySimpleGamePolicy)()
    D = SetCategorical(collect(keys(¤ђрхб.p)), collect(values(¤ђрхб.p)))
    return rand(D)
end

joint(X) = vec(collect(product(X...)))
joint(¤ђ, ¤ђрхб, i) = [i == j ? ¤ђрхб : ¤ђР▒╝ for (j, ¤ђР▒╝) in enumerate(¤ђ)]

function utility(­ЮњФ::MySimpleGameModel, ¤ђ, i)
    ­Юњю, R = ­ЮњФ.­Юњю, ­ЮњФ.R
    p(a) = prod(¤ђР▒╝(aР▒╝) for (¤ђР▒╝, aР▒╝) in zip(¤ђ, a))
    return sum(R(a)[i]*p(a) for a in joint(­Юњю))
end

function best_response(­Юњб::MySimpleGameModel, ¤ђ,i)
    U(aрхб) = utility(­Юњб, joint(¤ђ, MySimpleGamePolicy(aрхб), i), i);
    aрхб = argmax(U, ­Юњб.­Юњю[i]);
    return MySimpleGamePolicy(aрхб)
end

function softmax_response(­Юњб::MySimpleGameModel, ¤ђ, i, ╬╗)
    ­Юњюрхб = ­Юњб.­Юњю[i];
    U(aрхб) = utility(­Юњб, joint(¤ђ, MySimpleGamePolicy(aрхб), i), i);
    return MySimpleGamePolicy(aрхб => exp(╬╗*U(aрхб)) for aР▒╝ in ­Юњюрхб)
end